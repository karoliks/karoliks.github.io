{"version":3,"sources":["data/projectdata.js","projects/index.js","gallery/index.js","nav/index.js","App.js","serviceWorker.js","index.js"],"names":["projectdata","recipeapp","img","title","desc","link","exp","afk","reactgame","useStyles","makeStyles","root","textAlign","media","height","card","borderRadius","color","Projects","classes","Box","display","name","flexGrow","alignItems","Container","maxWidth","Grid","container","spacing","direction","Object","keys","map","project","i","key","item","xs","Card","CardActionArea","onClick","window","open","CardMedia","className","image","CardContent","Typography","gutterBottom","variant","component","Gallery","Nav","theme","createMuiTheme","palette","primary","main","secondary","App","ThemeProvider","style","flexDirection","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2WAAaA,EAAc,CACzBC,UAAW,CACTC,IAAK,iCACLC,MAAO,gBACPC,KACE,0EACFC,KAAM,0CAERC,IAAK,CACHJ,IAAK,0BACLC,MAAO,UACPC,KACE,4FACFC,KAAM,gEAERE,IAAK,CACHL,IAAK,0BACLC,MAAO,YACPC,KACE,0HACFC,KAAM,mCAERG,UAAW,CACTN,IAAK,0DACLC,MAAO,aACPC,KACE,iIACFC,KAAM,2C,QCVJI,G,MAAYC,YAAW,CAC3BC,KAAM,CACJC,UAAW,QAEbC,MAAO,CACLC,OAAQ,KAEVC,KAAM,CACJC,aAAc,OAKdC,MAAO,cAiDIC,MA5Cf,WACE,IAAMC,EAAUV,IAMhB,OACE,kBAACW,EAAA,EAAD,CAAKC,QAAQ,OAAOC,KAAK,WAAWC,SAAS,IAAIC,WAAW,UAC1D,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAU,OACnCC,OAAOC,KAAKhC,GAAaiC,KAAI,SAACC,EAASC,GAAV,OAC5B,kBAACR,EAAA,EAAD,CAAMS,IAAKD,EAAGE,MAAI,EAACC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAMpB,QAAS,CAAER,KAAMQ,EAAQJ,OAC7B,kBAACyB,EAAA,EAAD,CACEC,QAAS,kBAZRpC,EAYsBL,EAAYkC,GAAZ,UAXrCQ,OAAOC,KAAKtC,GADd,IAAiBA,IAcD,kBAACuC,EAAA,EAAD,CACEC,UAAW1B,EAAQN,MACnBiC,MAAO9C,EAAYkC,GAAZ,IACP/B,MAAOH,EAAYkC,GAAZ,QAET,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7CnD,EAAYkC,GAAZ,OAEH,kBAACc,EAAA,EAAD,CACEE,QAAQ,QACRjC,MAAM,gBACNkC,UAAU,KAETnD,EAAYkC,GAAZ,iBC5DRkB,MAJf,WACE,OAAO,wC,kBCkBMC,I,gBCRTC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cA4BGE,MAxBf,WACE,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAeP,MAAOA,GAEpB,kBAAC7B,EAAA,EAAD,CAAWqC,MAAO,CAAEhD,OAAQ,UAC1B,kBAACM,EAAA,EAAD,CACEC,QAAQ,OACR0C,cAAc,SACdD,MAAO,CAAEhD,OAAQ,UAGjB,wBAAI+B,UAAU,SAAd,YACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,IAAIC,OAAK,EAACd,UAAWjC,IACjC,kBAAC,IAAD,CAAO8C,KAAK,WAAWC,OAAK,EAACd,UAAWC,UC1BlCc,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14abf5e1.chunk.js","sourcesContent":["export const projectdata = {\n  recipeapp: {\n    img: \"/projectvisuals/recipe-app.png\",\n    title: \"Recipe Finder\",\n    desc:\n      \"Simple display and search for recipes. Created as a way to learn React.\",\n    link: \"https://karoliks.github.io/recipe-app/\",\n  },\n  exp: {\n    img: \"/projectvisuals/exp.png\",\n    title: \"Gallery\",\n    desc:\n      \"Page to show of earlier creations. Made to test out smooth scroll functions in JavaScript\",\n    link: \"https://karoliks.github.io/experimenting-with-smooth-scroll/\",\n  },\n  afk: {\n    img: \"/projectvisuals/afk.png\",\n    title: \"AFK Forum\",\n    desc:\n      \"A group project made for the course TDT414 - Software Engineering. The forum is made using Django and hosted on Heroku.\",\n    link: \"http://afk-forum.herokuapp.com/\",\n  },\n  reactgame: {\n    img: \"/projectvisuals/Screenshot from 2020-08-16 17-39-17.png\",\n    title: \"React Game\",\n    desc:\n      \"RPG game made with React. Made to gain a deeper understanding of React  and Redux. (And beacause I wanted to make pixel art:))\",\n    link: \"https://karoliks.github.io/react-game/\",\n  },\n};\n","import React from \"react\";\nimport {\n  Card,\n  Grid,\n  makeStyles,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Typography,\n  Container,\n} from \"@material-ui/core\";\nimport { projectdata } from \"../data/projectdata\";\nimport { spacing } from \"@material-ui/system\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./index.css\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: \"left\",\n  },\n  media: {\n    height: 184,\n  },\n  card: {\n    borderRadius: \"none\",\n    // borderWidth: \"4px\",\n    // borderColor: \"#FFDBDA\",\n    // borderStyle: \"solid\",\n    // backgroundColor: \"#DB7F8E\",\n    color: \"#DB7F8E\",\n    // boxShadow: \"none\",\n  },\n});\n\nfunction Projects() {\n  const classes = useStyles();\n\n  function routeTo(link) {\n    window.open(link); //This will open Google in a new\n  }\n\n  return (\n    <Box display=\"flex\" name=\"bokstest\" flexGrow=\"3\" alignItems=\"center\">\n      <Container maxWidth=\"md\">\n        <Grid container spacing={6} direction=\"row\">\n          {Object.keys(projectdata).map((project, i) => (\n            <Grid key={i} item xs={6}>\n              <Card classes={{ root: classes.card }}>\n                <CardActionArea\n                  onClick={() => routeTo(projectdata[project][\"link\"])}\n                >\n                  <CardMedia\n                    className={classes.media}\n                    image={projectdata[project][\"img\"]}\n                    title={projectdata[project][\"title\"]}\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {projectdata[project][\"title\"]}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      {projectdata[project][\"desc\"]}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n\nexport default Projects;\n","import React from \"react\";\n\nfunction Gallery() {\n  return <h1>Gallery</h1>;\n}\n\nexport default Gallery;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nfunction Nav() {\n  const [value, setValue] = React.useState(\"projects\");\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return (\n    <div>\n      <Tabs value={value} onChange={handleChange} centered>\n        <Tab value=\"projects\" label=\"Projects\" component={Link} to={\"/\"} />\n        <Tab value=\"gallery\" label=\"Gallery\" component={Link} to={\"/gallery\"} />\n      </Tabs>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Projects from \"./projects\";\nimport Gallery from \"./gallery\";\nimport Nav from \"./nav\";\n\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { Container } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#041B15\",\n    },\n    secondary: {\n      main: \"#4db6ac\",\n    },\n  },\n});\nfunction App() {\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        {/* <Container style={{ backgroundColor: \"#cfe8fc\", minHeight: \"100vh\" }}> */}\n        <Container style={{ height: \"100vh\" }}>\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            style={{ height: \"100vh\" }}\n          >\n            {/* <Nav /> */}\n            <h1 className=\"title\">Projects</h1>\n            <Switch>\n              <Route path=\"/\" exact component={Projects} />\n              <Route path=\"/gallery\" exact component={Gallery} />\n            </Switch>\n          </Box>\n        </Container>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}